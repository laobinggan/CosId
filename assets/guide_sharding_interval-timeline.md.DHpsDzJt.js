import{_ as e}from"./chunks/CosIdIntervalShardingAlgorithm.i1mFElwB.js";import{_ as t,a}from"./chunks/Throughput-Of-IntervalShardingAlgorithm-RangeShardingValue.o9hLIaep.js";import{_ as i,c as r,o,a3 as d}from"./chunks/framework.BsqFfzsZ.js";const v=JSON.parse('{"title":"基于间隔的时间范围分片算法","description":"","frontmatter":{},"headers":[],"relativePath":"guide/sharding/interval-timeline.md","filePath":"guide/sharding/interval-timeline.md","lastUpdated":1719104899000}'),n={name:"guide/sharding/interval-timeline.md"},s=d('<h1 id="基于间隔的时间范围分片算法" tabindex="-1">基于间隔的时间范围分片算法 <a class="header-anchor" href="#基于间隔的时间范围分片算法" aria-label="Permalink to &quot;基于间隔的时间范围分片算法&quot;">​</a></h1><p align="center"><img src="'+e+'" alt="CosIdIntervalShardingAlgorithm"></p><ul><li>算法复杂度：O(1)</li><li>易用性: 支持多种数据类型 (<code>Long</code>/<code>LocalDateTime</code>/<code>DATE</code>/ <code>String</code> / <code>SnowflakeId</code>)，而官方实现是先转换成字符串再转换成<code>LocalDateTime</code>，转换成功率受时间格式化字符影响。</li><li>性能 : 相比于 <code>org.apache.shardingsphere.sharding.algorithm.sharding.datetime.IntervalShardingAlgorithm</code> 性能高出 <em>1200~4000</em> 倍。</li></ul><table tabindex="0"><thead><tr><th><strong>PreciseShardingValue</strong></th><th><strong>RangeShardingValue</strong></th></tr></thead><tbody><tr><td><img src="'+t+'"></td><td><img src="'+a+'"></td></tr></tbody></table>',4),l=[s];function c(_,h,m,g,p,u){return o(),r("div",null,l)}const b=i(n,[["render",c]]);export{v as __pageData,b as default};
